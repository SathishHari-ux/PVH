<?xml version="1.0" encoding="utf-8"?>
<robot generated="20250307 14:34:12.680" generator="Rebot 6.0.2 (Python 3.13.2 on win32)" rpa="false" schemaversion="3">
 <suite id="s1" name="Tests" source="C:\Replay\PVH\Tests">
  <kw name="Setup highest level suite" type="SETUP">
   <kw library="BuiltIn" name="Set Variable">
    <var>
     ${d.test_server}
    </var>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Returns the given values which can then be assigned to a variables.
    </doc>
    <msg level="INFO" timestamp="20250307 14:33:39.875">
     ${d.test_server} = Dev
    </msg>
    <status endtime="20250307 14:33:39.876" starttime="20250307 14:33:39.875" status="PASS"/>
   </kw>
   <kw library="Support" name="Reset screenshot count variable">
    <kw library="BuiltIn" name="Set Variable">
     <var>
      ${screenshotCount}
     </var>
     <arg>
      ${PABOTQUEUEINDEX}_1
     </arg>
     <doc>
      Returns the given values which can then be assigned to a variables.
     </doc>
     <msg level="INFO" timestamp="20250307 14:33:39.876">
      ${screenshotCount} = 0_1
     </msg>
     <status endtime="20250307 14:33:39.876" starttime="20250307 14:33:39.876" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Set Global Variable">
     <arg>
      ${screenshotCount}
     </arg>
     <doc>
      Makes a variable available globally in all tests and suites.
     </doc>
     <msg level="INFO" timestamp="20250307 14:33:39.877">
      ${screenshotCount} = 0_1
     </msg>
     <status endtime="20250307 14:33:39.877" starttime="20250307 14:33:39.876" status="PASS"/>
    </kw>
    <kw library="Support" name="Set up screenshot directory">
     <kw library="OperatingSystem" name="Create Directory">
      <arg>
       ${OUTPUTDIR}${/}${wvar('screenshot_dir')}
      </arg>
      <doc>
       Creates the specified directory.
      </doc>
      <msg level="INFO" timestamp="20250307 14:33:39.878">
       Web.Dev.screenshot_dir: Screenshot
      </msg>
      <msg html="true" level="INFO" timestamp="20250307 14:33:39.879">
       Created directory '&lt;a href="file://C:\Replay\PVH\Output\6882c01c-0e49-4959-bc8d-322178588d18\pabot_results\0\Screenshot"&gt;C:\Replay\PVH\Output\6882c01c-0e49-4959-bc8d-322178588d18\pabot_results\0\Screenshot&lt;/a&gt;'.
      </msg>
      <status endtime="20250307 14:33:39.879" starttime="20250307 14:33:39.877" status="PASS"/>
     </kw>
     <status endtime="20250307 14:33:39.880" starttime="20250307 14:33:39.877" status="PASS"/>
    </kw>
    <status endtime="20250307 14:33:39.880" starttime="20250307 14:33:39.876" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Global Variable">
    <arg>
     ${screenshot_taking}
    </arg>
    <arg>
     ${True}
    </arg>
    <doc>
     Makes a variable available globally in all tests and suites.
    </doc>
    <msg level="INFO" timestamp="20250307 14:33:39.880">
     ${screenshot_taking} = True
    </msg>
    <status endtime="20250307 14:33:39.880" starttime="20250307 14:33:39.880" status="PASS"/>
   </kw>
   <kw library="Support" name="Setup linux execution">
    <kw library="BuiltIn" name="Run Keyword And Return Status">
     <var>
      ${web_test_check}
     </var>
     <arg>
      Variable Should Exist
     </arg>
     <arg>
      ${web_test}
     </arg>
     <doc>
      Runs the given keyword with given arguments and returns the status as a Boolean value.
     </doc>
     <kw library="BuiltIn" name="Variable Should Exist">
      <arg>
       ${web_test}
      </arg>
      <doc>
       Fails unless the given variable exists within the current scope.
      </doc>
      <status endtime="20250307 14:33:39.881" starttime="20250307 14:33:39.881" status="PASS"/>
     </kw>
     <msg level="INFO" timestamp="20250307 14:33:39.881">
      ${web_test_check} = True
     </msg>
     <status endtime="20250307 14:33:39.881" starttime="20250307 14:33:39.881" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Run Keyword If">
     <arg>
      ${web_test_check}
     </arg>
     <arg>
      Setup Docker Execution Options
     </arg>
     <doc>
      Runs the given keyword with the given arguments, if ``condition`` is true.
     </doc>
     <kw library="Support_Web" name="Setup Docker Execution Options">
      <kw library="Support_Web" name="Setup Suite Metadata">
       <arg>
        ${browser}
       </arg>
       <kw library="BrowserSupport" name="Get Browser Metadata">
        <var>
         &amp;{browser_information}
        </var>
        <arg>
         browser=${browser}
        </arg>
        <doc>
         Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}
        </doc>
        <msg level="INFO" timestamp="20250307 14:33:44.140">
         &amp;{browser_information} = { browser_version=134.0.6998.36 | driver_version=134.0.6998.35  }
        </msg>
        <status endtime="20250307 14:33:44.140" starttime="20250307 14:33:39.882" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_name
        </arg>
        <arg>
         ${browser}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20250307 14:33:44.141">
         Set suite metadata 'test_browser_name' to value 'chrome'.
        </msg>
        <status endtime="20250307 14:33:44.141" starttime="20250307 14:33:44.140" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_version
        </arg>
        <arg>
         ${browser_information.browser_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20250307 14:33:44.142">
         Set suite metadata 'test_browser_version' to value '134.0.6998.36'.
        </msg>
        <status endtime="20250307 14:33:44.142" starttime="20250307 14:33:44.141" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_driver_version
        </arg>
        <arg>
         ${browser_information.driver_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20250307 14:33:44.143">
         Set suite metadata 'test_driver_version' to value '134.0.6998.35 '.
        </msg>
        <status endtime="20250307 14:33:44.143" starttime="20250307 14:33:44.142" status="PASS"/>
       </kw>
       <status endtime="20250307 14:33:44.143" starttime="20250307 14:33:39.882" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Setup Global Docker Execution Options">
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         None
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20250307 14:33:44.145">
         ${global_browser_options} = None
        </msg>
        <status endtime="20250307 14:33:44.145" starttime="20250307 14:33:44.144" status="PASS"/>
       </kw>
       <kw library="OperatingSystem" name="Get Environment Variable">
        <var>
         ${docker_check}
        </var>
        <arg>
         EXECUTION_ENVIRONMENT
        </arg>
        <arg>
         not_found
        </arg>
        <doc>
         Returns the value of an environment variable with the given name.
        </doc>
        <msg level="INFO" timestamp="20250307 14:33:44.145">
         ${docker_check} = not_found
        </msg>
        <status endtime="20250307 14:33:44.145" starttime="20250307 14:33:44.145" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Run Keyword And Return If">
        <arg>
         "${docker_check}"!="docker"
        </arg>
        <arg>
         Log
        </arg>
        <arg>
         Not executing on Docker
        </arg>
        <doc>
         Runs the specified keyword and returns from the enclosing user keyword.
        </doc>
        <kw library="BuiltIn" name="Log">
         <arg>
          Not executing on Docker
         </arg>
         <doc>
          Logs the given message with the given level.
         </doc>
         <msg level="INFO" timestamp="20250307 14:33:44.146">
          Not executing on Docker
         </msg>
         <status endtime="20250307 14:33:44.146" starttime="20250307 14:33:44.146" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20250307 14:33:44.146">
         Returning from the enclosing user keyword.
        </msg>
        <status endtime="20250307 14:33:44.146" starttime="20250307 14:33:44.145" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Create List">
        <var>
         @{options}
        </var>
        <arg>
         --headless
        </arg>
        <arg>
         --no-sandbox
        </arg>
        <arg>
         --disable-dev-shm-usage
        </arg>
        <doc>
         Returns a list containing given items.
        </doc>
        <status endtime="20250307 14:33:44.146" starttime="20250307 14:33:44.146" status="NOT RUN"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         @{docker_options}
        </arg>
        <arg>
         @{options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <status endtime="20250307 14:33:44.147" starttime="20250307 14:33:44.147" status="NOT RUN"/>
       </kw>
       <status endtime="20250307 14:33:44.147" starttime="20250307 14:33:44.143" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Create Webdriver for chrome preferences">
       <kw library="Support_Web" name="Update Docker Execution Options">
        <var>
         ${list_prefs}
        </var>
        <arg>
         ${list_prefs}
        </arg>
        <kw library="BuiltIn" name="Run Keyword And Return Status">
         <var>
          ${docker_check}
         </var>
         <arg>
          Variable Should Exist
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <doc>
          Runs the given keyword with given arguments and returns the status as a Boolean value.
         </doc>
         <kw library="BuiltIn" name="Variable Should Exist">
          <arg>
           ${docker_options}
          </arg>
          <doc>
           Fails unless the given variable exists within the current scope.
          </doc>
          <msg level="FAIL" timestamp="20250307 14:33:44.150">
           Variable '${docker_options}' does not exist.
          </msg>
          <status endtime="20250307 14:33:44.150" starttime="20250307 14:33:44.148" status="FAIL"/>
         </kw>
         <msg level="INFO" timestamp="20250307 14:33:44.150">
          ${docker_check} = False
         </msg>
         <status endtime="20250307 14:33:44.150" starttime="20250307 14:33:44.148" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Get Length">
         <var>
          ${list_prefs_length}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Returns and logs the length of the given item as an integer.
         </doc>
         <msg level="INFO" timestamp="20250307 14:33:44.151">
          Length is 1
         </msg>
         <msg level="INFO" timestamp="20250307 14:33:44.151">
          ${list_prefs_length} = 1
         </msg>
         <status endtime="20250307 14:33:44.151" starttime="20250307 14:33:44.150" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Run Keyword If">
         <var>
          ${list_prefs}
         </var>
         <arg>
          ${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []
         </arg>
         <arg>
          Combine Lists
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE IF
         </arg>
         <arg>
          ${docker_check}
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Runs the given keyword with the given arguments, if ``condition`` is true.
         </doc>
         <kw library="BuiltIn" name="Set Variable">
          <arg>
           ${list_prefs}
          </arg>
          <doc>
           Returns the given values which can then be assigned to a variables.
          </doc>
          <status endtime="20250307 14:33:44.152" starttime="20250307 14:33:44.151" status="PASS"/>
         </kw>
         <msg level="INFO" timestamp="20250307 14:33:44.152">
          ${list_prefs} = [[]]
         </msg>
         <status endtime="20250307 14:33:44.152" starttime="20250307 14:33:44.151" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20250307 14:33:44.152">
         ${list_prefs} = [[]]
        </msg>
        <status endtime="20250307 14:33:44.152" starttime="20250307 14:33:44.147" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Create Chrome Options for download preferences">
        <var>
         ${chrome_options}
        </var>
        <kw library="BuiltIn" name="Evaluate">
         <var>
          ${chrome_options}
         </var>
         <arg>
          sys.modules['selenium.webdriver'].ChromeOptions()
         </arg>
         <arg>
          sys
         </arg>
         <doc>
          Evaluates the given expression in Python and returns the result.
         </doc>
         <msg level="INFO" timestamp="20250307 14:33:44.153">
          ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000018ACBC70A50&gt;
         </msg>
         <status endtime="20250307 14:33:44.153" starttime="20250307 14:33:44.152" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20250307 14:33:44.153">
         ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000018ACBC70A50&gt;
        </msg>
        <status endtime="20250307 14:33:44.153" starttime="20250307 14:33:44.152" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Update Preferences List">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         @{list_prefs}
        </arg>
        <kw library="BuiltIn" name="Convert To String">
         <var>
          ${string_prefs}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Converts the given item to a Unicode string.
         </doc>
         <msg level="INFO" timestamp="20250307 14:33:44.154">
          ${string_prefs} = [[]]
         </msg>
         <status endtime="20250307 14:33:44.154" starttime="20250307 14:33:44.153" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Return From Keyword If">
         <arg>
          ${string_prefs} == [[]]
         </arg>
         <doc>
          Returns from the enclosing user keyword if ``condition`` is true.
         </doc>
         <msg level="INFO" timestamp="20250307 14:33:44.154">
          Returning from the enclosing user keyword.
         </msg>
         <status endtime="20250307 14:33:44.154" starttime="20250307 14:33:44.154" status="PASS"/>
        </kw>
        <for flavor="IN">
         <var>
          ${preference}
         </var>
         <value>
          @{list_prefs}
         </value>
         <iter>
          <var name="${preference}"/>
          <kw library="BuiltIn" name="Call Method">
           <arg>
            ${chrome_options}
           </arg>
           <arg>
            add_argument
           </arg>
           <arg>
            ${preference}
           </arg>
           <doc>
            Calls the named method of the given object with the provided arguments.
           </doc>
           <status endtime="20250307 14:33:44.155" starttime="20250307 14:33:44.155" status="NOT RUN"/>
          </kw>
          <status endtime="20250307 14:33:44.155" starttime="20250307 14:33:44.155" status="NOT RUN"/>
         </iter>
         <status endtime="20250307 14:33:44.155" starttime="20250307 14:33:44.154" status="NOT RUN"/>
        </for>
        <status endtime="20250307 14:33:44.155" starttime="20250307 14:33:44.153" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Call Method">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         add_experimental_option
        </arg>
        <arg>
         prefs
        </arg>
        <arg>
         ${kw_prefs}
        </arg>
        <doc>
         Calls the named method of the given object with the provided arguments.
        </doc>
        <status endtime="20250307 14:33:44.156" starttime="20250307 14:33:44.155" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         ${chrome options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20250307 14:33:44.156">
         ${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000018ACBC70A50&gt;
        </msg>
        <status endtime="20250307 14:33:44.156" starttime="20250307 14:33:44.156" status="PASS"/>
       </kw>
       <status endtime="20250307 14:33:44.156" starttime="20250307 14:33:44.147" status="PASS"/>
      </kw>
      <status endtime="20250307 14:33:44.156" starttime="20250307 14:33:39.882" status="PASS"/>
     </kw>
     <status endtime="20250307 14:33:44.156" starttime="20250307 14:33:39.882" status="PASS"/>
    </kw>
    <status endtime="20250307 14:33:44.157" starttime="20250307 14:33:39.880" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Suite Metadata">
    <arg>
     environment
    </arg>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Sets metadata for the current test suite.
    </doc>
    <msg level="INFO" timestamp="20250307 14:33:44.157">
     Set suite metadata 'environment' to value 'Dev'.
    </msg>
    <status endtime="20250307 14:33:44.157" starttime="20250307 14:33:44.157" status="PASS"/>
   </kw>
   <status endtime="20250307 14:33:44.157" starttime="20250307 14:33:39.874" status="PASS"/>
  </kw>
  <suite id="s1-s1" name="Test PVH-sm51" source="C:\Replay\PVH\Tests\Test_PVH-sm51.robot">
   <kw library="PVH-sm51" name="System Logon" type="SETUP">
    <kw library="Process" name="Start Process">
     <arg>
      ${symvar('SAP_SERVER')}
     </arg>
     <doc>
      Starts a new process on background.
     </doc>
     <msg level="INFO" timestamp="20250307 14:33:44.177">
      Sym.Dev.SAP_SERVER: C:\Program Files (x86)\SAP\FrontEnd\SAPGUI\saplogon.exe
     </msg>
     <msg level="INFO" timestamp="20250307 14:33:44.177">
      Starting process:
"C:\Program Files (x86)\SAP\FrontEnd\SAPGUI\saplogon.exe"
     </msg>
     <status endtime="20250307 14:33:44.188" starttime="20250307 14:33:44.176" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      10s
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20250307 14:33:54.189">
      Slept 10 seconds
     </msg>
     <status endtime="20250307 14:33:54.189" starttime="20250307 14:33:44.188" status="PASS"/>
    </kw>
    <kw library="SAP_Tcode_Library" name="Connect To Session">
     <doc>
      Connects to an open session SAP.
     </doc>
     <status endtime="20250307 14:33:54.208" starttime="20250307 14:33:54.190" status="PASS"/>
    </kw>
    <kw library="SAP_Tcode_Library" name="Open Connection">
     <arg>
      ${symvar('PVH_connection')}
     </arg>
     <doc>
      Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.
     </doc>
     <msg level="INFO" timestamp="20250307 14:33:54.209">
      Sym.Dev.PVH_connection: PFD
     </msg>
     <status endtime="20250307 14:33:54.701" starttime="20250307 14:33:54.208" status="PASS"/>
    </kw>
    <kw library="SAP_Tcode_Library" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-MANDT
     </arg>
     <arg>
      ${symvar('PVH_Client_Id')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <msg level="INFO" timestamp="20250307 14:33:54.703">
      Sym.Dev.PVH_Client_Id: 000
     </msg>
     <msg level="INFO" timestamp="20250307 14:33:54.732">
      Typing text '000' into text field 'wnd[0]/usr/txtRSYST-MANDT'.
     </msg>
     <status endtime="20250307 14:33:54.732" starttime="20250307 14:33:54.701" status="PASS"/>
    </kw>
    <kw library="SAP_Tcode_Library" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-BNAME
     </arg>
     <arg>
      ${symvar('PVH_User_Name')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <msg level="INFO" timestamp="20250307 14:33:54.733">
      Sym.Dev.PVH_User_Name: DDIC
     </msg>
     <msg level="INFO" timestamp="20250307 14:33:54.744">
      Typing text 'DDIC' into text field 'wnd[0]/usr/txtRSYST-BNAME'.
     </msg>
     <status endtime="20250307 14:33:54.745" starttime="20250307 14:33:54.732" status="PASS"/>
    </kw>
    <kw library="SAP_Tcode_Library" name="Input Password">
     <arg>
      wnd[0]/usr/pwdRSYST-BCODE
     </arg>
     <arg>
      %{PVH_User_Password}
     </arg>
     <doc>
      Inserts the given password into the text field identified by locator.
The password is not recorded in the log.
     </doc>
     <msg level="INFO" timestamp="20250307 14:33:54.751">
      Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.
     </msg>
     <status endtime="20250307 14:33:54.751" starttime="20250307 14:33:54.745" status="PASS"/>
    </kw>
    <kw library="SAP_Tcode_Library" name="Send Vkey">
     <arg>
      0
     </arg>
     <doc>
      Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.
     </doc>
     <status endtime="20250307 14:33:55.341" starttime="20250307 14:33:54.752" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      3
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20250307 14:33:58.343">
      Slept 3 seconds
     </msg>
     <status endtime="20250307 14:33:58.343" starttime="20250307 14:33:55.342" status="PASS"/>
    </kw>
    <kw library="SAP_Tcode_Library" name="Multiple Logon Handling">
     <arg>
      wnd[1]
     </arg>
     <arg>
      wnd[1]/usr/radMULTI_LOGON_OPT2
     </arg>
     <arg>
      wnd[1]/tbar[0]/btn[0]
     </arg>
     <status endtime="20250307 14:33:58.345" starttime="20250307 14:33:58.343" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20250307 14:34:03.345">
      Slept 5 seconds
     </msg>
     <status endtime="20250307 14:34:03.346" starttime="20250307 14:33:58.345" status="PASS"/>
    </kw>
    <status endtime="20250307 14:34:03.346" starttime="20250307 14:33:44.175" status="PASS"/>
   </kw>
   <test id="s1-s1-t1" line="8" name="PVH-sm51">
    <kw library="PVH-sm51" name="PVH-sm51">
     <kw library="SAP_Tcode_Library" name="Run Transaction">
      <arg>
       /nsm51
      </arg>
      <doc>
       Runs a Sap transaction. An error is given when an unknown transaction is specified.
      </doc>
      <status endtime="20250307 14:34:04.947" starttime="20250307 14:34:03.348" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       1
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20250307 14:34:05.948">
       Slept 1 second
      </msg>
      <status endtime="20250307 14:34:05.949" starttime="20250307 14:34:04.948" status="PASS"/>
     </kw>
     <kw library="SAP_Tcode_Library" name="Take Screenshot">
      <arg>
       004_sm51_01.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <msg html="true" level="INFO" timestamp="20250307 14:34:06.012">
       &lt;a href="pabot_results%5C0%5C004_sm51_01.jpg"&gt;&lt;img src="pabot_results%5C0%5C004_sm51_01.jpg" width="800px"&gt;&lt;/a&gt;
      </msg>
      <status endtime="20250307 14:34:06.012" starttime="20250307 14:34:05.949" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       1
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20250307 14:34:07.013">
       Slept 1 second
      </msg>
      <status endtime="20250307 14:34:07.013" starttime="20250307 14:34:06.013" status="PASS"/>
     </kw>
     <kw library="Merger" name="Copy Images">
      <arg>
       ${OUTPUT_DIR}
      </arg>
      <arg>
       ${symvar('PVH_Target_Dir')}
      </arg>
      <msg level="INFO" timestamp="20250307 14:34:07.015">
       Sym.Dev.PVH_Target_Dir: C:\tmp\PVH\Pre\
      </msg>
      <msg level="INFO" timestamp="20250307 14:34:07.135">
       Copied: 004_sm51_01.jpg
Skipped: Output.xml - Not a valid image file or format not supported. Error: cannot identify image file 'C:\\Replay\\PVH\\Output\\6882c01c-0e49-4959-bc8d-322178588d18\\pabot_results\\0\\Output.xml'
Skipped: robot_stderr.out - Not a valid image file or format not supported. Error: cannot identify image file 'C:\\Replay\\PVH\\Output\\6882c01c-0e49-4959-bc8d-322178588d18\\pabot_results\\0\\robot_stderr.out'
Skipped: robot_stdout.out - Not a valid image file or format not supported. Error: cannot identify image file 'C:\\Replay\\PVH\\Output\\6882c01c-0e49-4959-bc8d-322178588d18\\pabot_results\\0\\robot_stdout.out'
      </msg>
      <status endtime="20250307 14:34:07.136" starttime="20250307 14:34:07.014" status="PASS"/>
     </kw>
     <status endtime="20250307 14:34:07.136" starttime="20250307 14:34:03.347" status="PASS"/>
    </kw>
    <tag>
     pvh-sm51
    </tag>
    <tag>
     Regression
    </tag>
    <status endtime="20250307 14:34:07.136" starttime="20250307 14:34:03.346" status="PASS"/>
   </test>
   <kw library="PVH-sm51" name="System Logout" type="TEARDOWN">
    <kw library="SAP_Tcode_Library" name="Run Transaction">
     <arg>
      /nex
     </arg>
     <doc>
      Runs a Sap transaction. An error is given when an unknown transaction is specified.
     </doc>
     <status endtime="20250307 14:34:07.179" starttime="20250307 14:34:07.138" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20250307 14:34:12.181">
      Slept 5 seconds
     </msg>
     <status endtime="20250307 14:34:12.181" starttime="20250307 14:34:07.180" status="PASS"/>
    </kw>
    <status endtime="20250307 14:34:12.181" starttime="20250307 14:34:07.137" status="PASS"/>
   </kw>
   <status endtime="20250307 14:34:12.181" starttime="20250307 14:33:44.157" status="PASS"/>
  </suite>
  <doc>
   Testing functionality through Robot Framework
  </doc>
  <meta name="environment">
   Dev
  </meta>
  <meta name="test_browser_name">
   chrome
  </meta>
  <meta name="test_browser_version">
   134.0.6998.36
  </meta>
  <meta name="test_driver_version">
   134.0.6998.35
  </meta>
  <meta name="test_environment">
   Dev
  </meta>
  <meta name="test_freeze_dependencies">
   astroid==3.3.8,attrs==25.1.0,beautifulsoup4==4.13.3,bs4==0.0.2,certifi==2025.1.31,cffi==1.17.1,chardet==5.2.0,charset-normalizer==3.4.1,click==8.1.8,colorama==0.4.6,cryptography==44.0.2,defusedxml==0.7.1,dill==0.3.9,docutils==0.21.2,et_xmlfile==2.0.0,exceptiongroup==1.2.2,gitdb==4.0.12,GitPython==3.1.44,h11==0.14.0,idna==3.10,isort==6.0.1,Jinja2==3.1.5,jira==3.8.0,jsonpath-ng==1.7.0,jsonschema==4.23.0,jsonschema-specifications==2024.10.1,lazy-object-proxy==1.10.0,lxml==5.3.1,markdown-it-py==3.0.0,MarkupSafe==3.0.2,mccabe==0.7.0,mdurl==0.1.2,natsort==8.4.0,oauthlib==3.2.2,openpyxl==3.1.5,outcome==1.3.0.post0,packaging==24.2,pathspec==0.11.2,pillow==11.1.0,pip==25.0.1,platformdirs==4.3.6,ply==3.11,pycparser==2.22,Pygments==2.19.1,pylint==3.3.4,PySocks==1.7.1,pywin32==308,PyYAML==6.0.2,referencing==0.36.2,requests==2.32.3,requests-oauthlib==2.0.0,requests-toolbelt==1.0.0,rich==13.9.4,rich-click==1.6.1,robotframework==6.0.2,robotframework-datadriver==1.9.0,robotframework-excellib==2.0.1,robotframework-jsonlibrary==0.5,robotframework-pabot==2.16.0,robotframework-pythonlibcore==4.2.0,robotframework-requests==0.9.2,robotframework-sapguilibrary==1.1,robotframework-seleniumlibrary==5.1.3,robotframework-stacktrace==0.4.1,robotframework-tidy==4.5.0,rpds-py==0.23.1,selenium==4.9.1,setuptools==75.8.2,smmap==5.0.2,sniffio==1.3.1,sortedcontainers==2.4.0,soupsieve==2.6,tomli==2.0.2,tomlkit==0.13.2,trio==0.29.0,trio-websocket==0.12.2,typing_extensions==4.12.2,urllib3==2.3.0,wheel==0.45.1,wrapt==1.17.2,wsproto==1.2.0
  </meta>
  <status endtime="20250307 14:34:12.241" starttime="20250307 14:33:39.496" status="PASS"/>
 </suite>
 <statistics>
  <total>
   <stat fail="0" pass="1" skip="0">
    All Tests
   </stat>
  </total>
  <tag>
   <stat fail="0" pass="1" skip="0">
    pvh-sm51
   </stat>
   <stat fail="0" pass="1" skip="0">
    Regression
   </stat>
  </tag>
  <suite>
   <stat fail="0" id="s1" name="Tests" pass="1" skip="0">
    Tests
   </stat>
   <stat fail="0" id="s1-s1" name="Test PVH-sm51" pass="1" skip="0">
    Tests.Test PVH-sm51
   </stat>
  </suite>
 </statistics>
 <errors>
 </errors>
</robot>
